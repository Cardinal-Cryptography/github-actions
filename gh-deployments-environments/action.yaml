---
name: GH Deployments and Environments
description: |
  Creates, updates and deletes GitHub Deployments and Environments
inputs:
  action:
    description: One of 'create-deployment', 'create-deployment-status'
    required: true
  env:
    description: Environment name
    required: false
  ref:
    description: Ref for deployment
    required: false
  token:
    description: GitHub token
    required: true
  owner:
    description: Owner
    required: true
  repo:
    description: Repo
    required: true
  deployment-id:
    description: Deployment ID
    required: false
  status:
    description: Status of the deployment, one of error, failure, inactive, in_progress, queued, pending, success
    required: false
outputs:
  deployment-id: 
    description: ID of created deployment
    value: ${{ steps.create-deployment.outputs.deployment-id }}
runs:
  using: composite
  steps:
    - name: Make helper.sh executable
      shell: bash
      run: |
        chmod +x ${{ github.action_path }}/helper.sh

    - name: Create deployment
      id: create-deployment
      if: ${{ inputs.action == 'create-deployment' }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        ${{ github.action_path }}/helper.sh create-deployment "${{ inputs.owner }}" "${{ inputs.repo }}" "${{ inputs.env }}" "${{ inputs.ref }}" "deployment-id.txt"

        deployment_id=$(cat deployment-id.txt)
        if [[ "${deployment_id}" =~ ^[0-9]{1,32}$ ]]; then
          echo "Got deployment id of ${deployment_id}"
        else
          echo "!!! Error creating deployment"
          exit 1
        fi
        echo "deployment-id=${deployment_id}" >> $GITHUB_OUTPUT

    - name: Create deployment status
      id: create-deployment-status
      if: ${{ inputs.action == 'create-deployment-status' }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        ${{ github.action_path }}/helper.sh create-deployment-status "${{ inputs.owner }}" "${{ inputs.repo }}" "${{ inputs.deployment-id }}" "${{ inputs.status }}"

    - name: Delete environment
      id: delete-environment
      if: ${{ inputs.action == 'delete-environment' }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        exit 0;
        if [[ "${{ inputs.env }}" == "devnet" || "${{ inputs.env }}" == "testnet" || "${{ inputs.env }}" == "mainnet" ]]; then
          echo "!!! Invalid env"
          exit 1
        fi

        if [[ -z "${{ inputs.env }}" ]]; then
          echo "!!! env is empty"
          exit 1
        fi

        curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.token }}"\
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ inputs.owner }}/${{ inputs.repo }}/deployments?environment=${{ inputs.env }} > tmp-output.txt

        cat tmp-output.txt

        for deployment_id in $(cat tmp-output.txt | jq -r '.[].id'); do    
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ inputs.owner }}/${{ inputs.repo }}/deployments/${deployment_id}/statuses > tmp-output2.txt

          cat tmp-output2.txt

          last_state=$(cat tmp-output2.txt | jq -r '.[0].state')
          if [[ "${last_state}" != "inactive" ]]; then
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ inputs.token }}"\
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d '{"state":"inactive"}' \
              https://api.github.com/repos/${{ inputs.owner }}/${{ inputs.repo }}/deployments/${deployment_id}/statuses
          fi

          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ inputs.owner }}/${{ inputs.repo }}/deployments/${deployment_id}
        done
