---
name: Create featurenet
description: |
  This action several flows
  * spawns new featurenet bootstraped from PR, node binary is test one (short session)
  * spawns new update net from a node image that is on ECR, prpduction one (normal session)
  * upgrades featurenet binary to a given version
inputs:
  gh-ci-token:
    description: 'GH token to be used in the action'
    required: true
  repo-featurenets-name:
    description: 'Name of the repository containing featurenets manifests'
    required: true
  repo-featurenet-template-name:
    description: 'Name of the repository containing featurenet template'
    required: true
  argo-sync-user-token:
    description: 'ArgoCD user token to be used in the action'
    required: true
  ecr-public-registry:
    description: "ECR public registry, with slash at the end, eg. 'public.ecr.aws/something/'"
    required: true
  featurenet-name:
    description: 'Name of featurenet'
    required: true
  git-commit-author:
    description: 'Git commit author when pushing to featurenets repository'
    required: true
  git-commit-email:
    description: 'Git commit email when pushing to featurenets repository'
    required: true
  featurenet-aleph-node-image:
    description: |
      Set featurenet image either to:
       * 'testnet' or 'mainnet' - to Testnet or Mainnet image respectively,
       * a 7 byte SHA - to exisiting ECR aleph-node image tag
       * empty value - to image built from PR
    required: false
    default: ''
  expiration:
    description: 'Time after which updatenet will be removed'
    required: false
    default: ''
  rolling-update-partition:
    description: |
      Number from 0 to N-1, where N is size of am existing featurenet.
      All aleph-node-validator-N with an ordinal N that is great than or equal to the partition
      will be updated. If not specified, all nodes will be updated.
    required: false
    default: "0"
  replicas:
    description: |
      Number of pods to start, from 0 to 50.
    required: false
    default: "5"
  internal:
    description: 'Internal network, accessible from VPN only'
    required: false
    default: "false"
  wait-for-finalized-heads:
    description: 'Wait for heads finalization'
    required: false
    default: "false"
outputs:
  ws-hostname:
    description: Hostname of the WS endpoint
    value: ${{ steps.start-featurenet.outputs.ws-hostname }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[
          ! '${{ inputs.featurenet-name }}' =~ ^[a-z0-9][a-z0-9\-]{4,48}$
        ]]
        then
          echo "!!! Invalid featurenet name"
          exit 1
        fi
        if [[
          '${{ inputs.featurenet-aleph-node-image }}' != "" && \
          ! '${{ inputs.featurenet-aleph-node-image }}' =~ ^[a-f0-9]{7}$ && \
          '${{ inputs.featurenet-aleph-node-image }}' != "testnet" && \
          '${{ inputs.featurenet-aleph-node-image }}' != "mainnet"
        ]]
        then
          echo "!!! Invalid featurenet node image tag"
          exit 1
        fi
        if [[
          '${{ inputs.rolling-update-partition }}' != "" && \
          ! '${{ inputs.rolling-update-partition }}' =~ ^[0-9]$
        ]]
        then
          echo "!!! Expected rolling update partition to be a cardinal value from 0 to 9"
          exit 1
        fi
        if [[
          '${{ inputs.replicas }}' != "" && \
          ! '${{ inputs.replicas }}' =~ ^[0-9]{1,2}$ || '${{ inputs.replicas }}' -gt 50
        ]]
        then
          echo "!!! Expected replicas to be a cardinal value from 0 to 50"
          exit 1
        fi
        if [[
          '${{ inputs.expiration }}' != "" && \
          ! '${{ inputs.expiration }}' =~ ^[0-9]{1,6}h$ && \
          '${{ inputs.expiration }}' != "never"
        ]]
        then
          echo "!!! Expected expiration to have values from set {3h, 12h, 24h, 48h, 96h, never}"
          exit 1
        fi

    - name: Get branch name and commit SHA
      id: get-ref-properties
      uses: Cardinal-Cryptography/github-actions/get-ref-properties@v1

    - name: Get node commit SHA
      if: ${{ inputs.featurenet-aleph-node-image == 'testnet' ||
        inputs.featurenet-aleph-node-image == 'mainnet' }}
      id: get-node-commit-sha
      uses: Cardinal-Cryptography/github-actions/get-node-system-version@v1
      with:
        env: ${{ inputs.featurenet-aleph-node-image }}

    - name: Checkout featurenet template repo
      uses: actions/checkout@v3
      with:
        repository: Cardinal-Cryptography/${{ inputs.repo-featurenet-template-name }}
        token: ${{ inputs.gh-ci-token }}
        path: "${{ inputs.repo-featurenet-template-name }}"
        ref: A0-3467-unify-featurenet-creation
        fetch-depth: 0

    - name: Start featurenet from PR branch
      id: start-featurenet
      shell: bash
      env:
        GITHUB_USERNAME: aleph-ci-user
        GITHUB_TOKEN: ${{ inputs.gh-ci-token }}
        GIT_COMMIT_USER_NAME: ${{ inputs.git-commit-author }}
        GIT_COMMIT_USER_EMAIL: ${{ inputs.git-commit-email }}
      # yamllint disable rule:line-length
      run: |
        cd '${{ inputs.repo-featurenet-template-name }}'

        # featurenet creation from commit from PR
        if [[ '${{ inputs.featurenet-aleph-node-image }}' == '' ]]; then
          pr_image_tag='fe-${{ steps.get-ref-properties.outputs.branch-name-for-argo-with-sha }}'
          fnet_aleph_node_image="${{ inputs.ecr-public-registry }}feature-env-aleph-node:${pr_image_tag}"
        # updatenet creation from Testnet or Mainnet image
        elif [[ '${{ inputs.featurenet-aleph-node-image }}' == 'testnet' || \
            '${{ inputs.featurenet-aleph-node-image }}' == 'mainnet' ]]; then
          ecr_image_tag='${{ steps.get-node-commit-sha.outputs.sha }}'
          fnet_aleph_node_image="${{ inputs.ecr-public-registry }}aleph-node:${ecr_image_tag}"
        # updatenet update, ie updating binary to given version and runtime update
        else
          fnet_aleph_node_image='${{ inputs.ecr-public-registry }}aleph-node:${{ inputs.featurenet-aleph-node-image }}'
        fi

        ./create-featurenet.sh \
          '${{ inputs.featurenet-name }}' \
          "${fnet_aleph_node_image}" \
          '${{ inputs.replicas }}' \
          '${{ inputs.rolling-update-partition }}' \
          '${{ inputs.expiration }}' \
          ${{ inputs.internal == 'true' && '-i' || '' }} \
          -c -g | tee -a tmp-opssh-createfeaturenet-output.txt

        ws_hostname=$(cat tmp-opssh-createfeaturenet-output.txt | grep '^__output:ws-hostname:' | cut -d: -f3)
        echo "ws-hostname=${ws_hostname}" >> $GITHUB_OUTPUT
      # yamllint enable rule:line-length

    - name: Refresh Argo and wait for the creation to be finished
      shell: bash
      run: |
        cd '${{ inputs.repo-featurenet-template-name }}'

        ./refresh-featurenets.sh \
          '${{ inputs.argo-sync-user-token }}' \
          '${{ inputs.featurenet-name }}'

    - name: Wait for the unique consecutive finalized heads
      if: inputs.wait-for-finalized-heads == 'true'
      shell: bash
      run: |
        cd '${{ inputs.repo-featurenet-template-name }}'

        ./wait-for-featurenet-finalized-heads.sh '${{ inputs.featurenet-name }}'
