---
name: Test upstream merge
description: |
  Adds upstream and tries to merge it
inputs:
  target-repo:
    description: Repository to merge to, in format 'owner/repo'
    required: true
  target-branch:
    description: Branch to merge to
    required: true
  upstream-repo-url:
    description: Upstream repository URL to merge from, eg. https://github.com/owner/repo
    required: true
  upstream-branch:
    description: Upstream branch to merge from
    required: true
  git-commit-author:
    description: 'Git commit author when pushing to target repository'
    required: true
  git-commit-email:
    description: 'Git commit email when pushing to target repository'
    required: true
  gh-ci-token:
    description: 'GH token to be used in the action'
    required: true
  slack-webhook-url:
    description: Slack webhook URL
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.target-repo }}
        ref: ${{ inputs.target-branch }}
        path: target
        fetch-depth: 0
        token: ${{ inputs.gh-ci-token }}

    - name: Set PR branch
      id: get-pr-branch
      shell: bash
      run: |
        echo 'pr-branch=a0-ops-upstream-automerge' >> $GITHUB_OUTPUT

    - name: Get upstream repository name from URL
      shell: bash
      id: get-repository-name
      run: |
        echo "repository-name=$(echo '${{ inputs.upstream-repo-url }}' | sed 's|https://github.com/||g')" >> $GITHUB_OUTPUT

    - name: Checkout upstream repository
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.get-repository-name.outputs.repository-name }}
        ref: ${{ inputs.upstream-branch }}
        path: upstream
        fetch-depth: 1
        token: ${{ inputs.gh-ci-token }}

    - name: Get target last commit SHA
      shell: bash
      id: get-target-sha
      run: |
        cd target
        git log -n 3
        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Get upstream last commit SHA
      shell: bash
      id: get-upstream-sha
      run: |
        cd upstream
        git log -n 3
        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Check if merge is needed
      shell: bash
      id: check-if-merge-needed
      run: |
        cd target
        set +e
        merge_needed="no"
        git merge-base --is-ancestor '${{ steps.get-upstream-sha.outputs.sha }}' HEAD
        if [[ $? != 0 ]]; then
          merge_needed='yes'
        fi
        set -e
        echo "merge=${merge_needed}" >> $GITHUB_OUTPUT

    - name: Remove existing upstream merge branch if nothing to do
      shell: bash
      run: |
        if [[ '${{ steps.check-if-merge-needed.outputs.merge }}' != 'yes' ]]; then
          echo 'Upstream SHA is an ancestor of target branch.  There is nothing to do.  Removing existing auto merge branch...'
          set +e
          git push origin ':${{ steps.get-pr-branch.outputs.pr-branch }}'
          set -e
        fi

    - name: Add upstream
      shell: bash
      if: ${{ steps.check-if-merge-needed.outputs.merge != 'yes' }}
      run: |
        cd target
        git remote add upstream '${{ inputs.upstream-repo-url }}'
        git fetch upstream
        git remote -v
        git remote show upstream

    - name: Merge upstream
      shell: bash
      if: ${{ steps.check-if-merge-needed.outputs.merge != 'yes' }}
      id: get-merge-base
      # yamllint enable rule:line-length
      run: |
        cd target
        git config user.name '${{ inputs.git-commit-author }}'
        git config user.email '${{ inputs.git-commit-author }}'

        # Name of PR branch
        pr_branch='${{ steps.get-pr-branch.outputs.pr-branch }}'

        # Get latest common ancestor
        merge_base=$(git merge-base '${{ inputs.target-branch }}' 'upstream/${{ inputs.upstream-branch }}')

        # Remove existing branch
        set +e
        git push origin :${pr_branch}
        sleep 5 # Let's give GitHub some time to close the existing pull request
        set -e

        # Checkout last common ancestor
        git checkout "${merge_base}"

        # Create a new branch for PR with the merged upstream
        git checkout -b "${pr_branch}"

        # Merge and push the upstream branch
        git merge upstream/${{ inputs.upstream-branch }}
        git push origin "${pr_branch}"

        # Wait a while to give GitHub action process things before we send another payload
        sleep 5

        # Output merge-base
        echo "merge-base=${merge_base}" >> $GITHUB_OUTPUT

    - name: Create PR body
      uses: Cardinal-Cryptography/github-actions/replace-string@v3
      if: ${{ steps.check-if-merge-needed.outputs.merge != 'yes' }}
      with:
        read-from-file: ${{ github.action_path }}/pr-body.txt
        write-to-file: pr-body-to-add.txt
        replace-regex: |-
          __UPSTREAM_REPO_URL__
          __REPOSITORY_NAME__
          __UPSTREAM_BRANCH__
          __COMMIT_SHA__
          __TARGET_REPO__
          __TARGET_BRANCH__
          __MERGE_BASE__
        replace-with: |-
          ${{ inputs.upstream-repo-url }}
          ${{ steps.get-repository-name.outputs.repository-name }}
          ${{ inputs.upstream-branch }}
          ${{ steps.get-upstream-sha.outputs.sha }}
          ${{ inputs.target-repo }}
          ${{ inputs.target-branch }}
          ${{ steps.get-merge-base.outputs.merge-base }}
    
    - name: Replace newline chars
      uses: Cardinal-Cryptography/github-actions/replace-string@v3
      if: ${{ steps.check-if-merge-needed.outputs.merge != 'yes' }}
      id: pr-body-for-json
      with:
        read-from-file: pr-body-to-add.txt
        write-to-file: pr-body-for-json.txt
        replace-regex: \n
        # Javascript cannot make a replacement with literal '\n' (meaning 2 characters, 
        # not newline char)
        replace-with: '@NEW_LINE_ALEPHZERO@'
        flags: g

    - name: Create JSON payload
      uses: Cardinal-Cryptography/github-actions/replace-string@v3
      if: ${{ steps.check-if-merge-needed.outputs.merge != 'yes' }}
      with:
        read-from-file: ${{ github.action_path }}/gh-api-payload.json
        write-to-file: gh-api-payload-to-send.json
        replace-regex: |-
          __TITLE__
          __BODY__
          __HEAD__
          __BASE__
        replace-with: |-
          Merge upstream from ${{ steps.get-repository-name.outputs.repository-name }}@${{ inputs.upstream-branch }} (${{ steps.get-upstream-sha.outputs.sha }})
          ${{ steps.pr-body-for-json.outputs.replaced-string }}
          ${{ steps.get-pr-branch.outputs.pr-branch }}
          ${{ inputs.target-branch }}

    - name: Create pull request
      shell: bash
      if: ${{ steps.check-if-merge-needed.outputs.merge != 'yes' }}
      id: create-pull-request
      run: |
        # replace-string action is unable to replace with literal '\n' (meaning 2 chars)
        sed -i 's/@NEW_LINE_ALEPHZERO@/\\n/g' gh-api-payload-to-send.json

        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.gh-ci-token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ inputs.target-repo }}/pulls \
          -d @gh-api-payload-to-send.json > tmp-curl-output.txt

        # Wait a while to give GitHub action process things before we send another payload
        sleep 5

        # Set outputs for further steps
        echo "pull-request-number=$(cat tmp-curl-output.txt | jq -r '.number')" >> $GITHUB_OUTPUT
        echo "pull-request-url=$(cat tmp-curl-output.txt | jq -r '.html_url')" >> $GITHUB_OUTPUT
      # yamllint disable rule:line-length

    - name: Check for conflicts
      shell: bash
      id: merge-upstream
      if: ${{ steps.check-if-merge-needed.outputs.merge != 'yes' }}
      run: |
        cd target
        git checkout '${{ inputs.target-branch }}'

        set +e
        merge_failed=0
        git merge 'upstream/${{ inputs.upstream-branch }}'
        if [[ $? != 0 ]]; then
          merge_failed=1
        fi

        echo "merge-failed=${merge_failed}" >> $GITHUB_OUTPUT

    - name: Create failure slack notification
      if: ${{ steps.check-if-merge-needed.outputs.merge == 'yes' && steps.merge-upstream.outputs.merge-failed == '1' }}
      uses: Cardinal-Cryptography/github-actions/replace-string@v3
      with:
        read-from-file: ${{ github.action_path }}/slack-msg-failure.json
        write-to-file: slack-msg-failure-to-use.json
        replace-regex: |-
          __RUN_URL__
          __TARGET__
          __UPSTREAM__
          __PULL_REQUEST_NUMBER__
          __PULL_REQUEST_URL__
        replace-with: |-
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ${{ inputs.target-repo }}/${{ inputs.target-branch }}
          ${{ inputs.upstream-repo-url }}@${{ inputs.upstream-branch }}
          ${{ steps.create-pull-request.outputs.pull-request-number }}
          ${{ steps.create-pull-request.outputs.pull-request-url }}

    - name: Create success slack notification
      if: ${{ steps.check-if-merge-needed.outputs.merge == 'yes' && steps.merge-upstream.outputs.merge-failed == '0' }}
      uses: Cardinal-Cryptography/github-actions/replace-string@v3
      with:
        read-from-file: ${{ github.action_path }}/slack-msg-failure.json
        write-to-file: slack-msg-success-to-use.json
        replace-regex: |-
          __RUN_URL__
          __TARGET__
          __UPSTREAM__
          __PULL_REQUEST_NUMBER__
          __PULL_REQUEST_URL__
        replace-with: |-
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ${{ inputs.target-repo }}/${{ inputs.target-branch }}
          ${{ inputs.upstream-repo-url }}@${{ inputs.upstream-branch }}
          ${{ steps.create-pull-request.outputs.pull-request-number }}
          ${{ steps.create-pull-request.outputs.pull-request-url }}

    - name: Send notification
      shell: bash
      if: ${{ inputs.slack-webhook-url != '' && steps.check-if-merge-needed.outputs.merge != 'yes' }}
      run: |
        if [[ '${{ steps.merge-upstream.outputs.merge-failed }}' == '1' ]]; then
          curl -X POST -d @slack-msg-failure-to-use.json '${{ inputs.slack-webhook-url }}'
        else
          curl -X POST -d @slack-msg-success-to-use.json '${{ inputs.slack-webhook-url }}'
        fi
