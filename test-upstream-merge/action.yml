---
name: Test upstream merge
description: |
  Adds upstream and tries to merge it
inputs:
  target-repo:
    description: Repository to merge to, in format 'owner/repo'
    required: true
  target-branch:
    description: Branch to merge to
    required: true
  upstream-repo-url:
    description: Upstream repository URL to merge from, eg. https://github.com/owner/repo
    required: true
  upstream-branch:
    description: Upstream branch to merge from
    required: true
  git-commit-author:
    description: 'Git commit author when pushing to target repository'
    required: true
  git-commit-email:
    description: 'Git commit email when pushing to target repository'
    required: true
  gh-ci-token:
    description: 'GH token to be used in the action'
    required: true
  slack-webhook-url:
    description: Slack webhook URL
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.target-repo }}
        ref: ${{ inputs.target-branch }}
        path: target
        fetch-depth: 0
        token: ${{ inputs.gh-ci-token }}

    - name: Get upstream repository name from URL
      shell: bash
      id: get-repository-name
      run: |
        echo "repository-name=$(echo '${{ inputs.upstream-repo-url }}' | sed 's|https://github.com/||g')" >> $GITHUB_OUTPUT

    - name: Checkout upstream repository
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.get-repository-name.outputs.repository-name }}
        ref: ${{ inputs.upstream-branch }}
        path: upstream
        fetch-depth: 0
        token: ${{ inputs.gh-ci-token }}

    - name: Show target latest commits
      shell: bash
      run: |
        cd target
        git log -n 5

    - name: Get upstream last commit SHA
      shell: bash
      id: get-upstream-sha
      run: |
        cd upstream
        echo "upstream-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Add upstream
      shell: bash
      run: |
        cd target
        git remote add upstream ${{ inputs.upstream-repo-url }}
        git fetch upstream
        git remote -v
        git remote show upstream

    - name: Merge upstream
      shell: bash
      id: merge-upstream
      # yamllint enable rule:line-length
      run: |
        cd target
        git config user.name "${{ inputs.git-commit-author }}"
        git config user.email "${{ inputs.git-commit-author }}"

        pr_branch="upstreambot-merge-upstream"
        merge_base=$(git merge-base "${{ inputs.target-branch }}" "upstream/${{ inputs.upstream-branch }}")

        # Removing existing branch, feel free to remove that step
        set +e
        git push origin :${pr_branch}
        set -e
        git checkout "${merge_base}"
        git log -n 2
        git switch -c "${pr_branch}"
        git merge upstream/${{ inputs.upstream-branch }}
        git status
        git log -n 3
        git add .
        git commit --allow-empty -m "Merge upstream from ${{ steps.get-repository-name.outputs.repository-name }}@${{ inputs.upstream-branch }}:${{ steps.get-upstream-sha.outputs.sha }}"
        git log -n 4
        git push origin "${pr_branch}"

        #pr_body="Merging upstream from ${{ inputs.upstream-repo-url }}@${{ inputs.upstream-branch }}"
        #repo_name=$(echo "${{ inputs.target-repo }}" | cut -d/ -f2)
        #data="{\"title\":\"Merge upstream\",\"body\":\"${pr_body}\",\"head\":\"${repo_name}:${pr_branch}\",\"base\":\"${{ inputs.target-branch }}\"}"
        #echo ${data}
        #curl -vvv -L \
        #  -X POST \
        #  -H "Accept: application/vnd.github+json" \
        #  -H "Authorization: Bearer ${{ inputs.gh-ci-token }}" \
        #  -H "X-GitHub-Api-Version: 2022-11-28" \
        #  https://api.github.com/repos/${{ inputs.target-repo }}/pulls \
        #  -d "${data}"

        #echo "merge-failed=0" >> $GITHUB_OUTPUT
      # yamllint disable rule:line-length

    # - name: Send notification
    #   shell: bash
    #   if: ${{ inputs.slack-webhook-url != '' }}
    #   run: |
    #     run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    #     target="${{ inputs.target-repo }}/${{ inputs.target-branch }}"
    #     upstream="${{ inputs.upstream-repo-url }}@${{ inputs.upstream-branch }}"
    #     if [[ "${{ steps.merge-upstream.outputs.merge-failed }}" == "1" ]]; then
    #       cat ${{ github.action_path }}/slack-msg-failure.json > tmp-slack-msg.json
    #     else
    #       cat ${{ github.action_path }}/slack-msg-success.json > tmp-slack-msg.json
    #     fi
    #     sed -i "s|__RUN_URL__|${run_url}|g" tmp-slack-msg.json
    #     sed -i "s|__TARGET__|${target}|g" tmp-slack-msg.json
    #     sed -i "s|__UPSTREAM__|${upstream}|g" tmp-slack-msg.json
    #     
    #     curl -X POST -d @tmp-slack-msg.json "${{ inputs.slack-webhook-url }}"
